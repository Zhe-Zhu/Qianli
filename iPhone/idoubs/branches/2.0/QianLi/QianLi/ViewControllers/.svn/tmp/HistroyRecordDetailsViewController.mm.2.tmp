//
//  HistroyRecordDetailsViewController.m
//  QianLi
//
//  Created by Chen Xiangwen on 5/8/13.
//  Copyright (c) 2013 Chen Xiangwen. All rights reserved.
//

#import "HistroyRecordDetailsViewController.h"
#import "Reachability.h"
#import "QianLiContactsAccessor.h"
#import "MobClick.h"

@interface HistroyRecordDetailsViewController ()
{
    NSMutableArray *_chatRecords; // chatRecords每个数组元素的内容包括: cellType(描述该cell展示的内容,是通话记录还是照片等), cellContent(cell的内容,根据不同的type,内容不同,可能是照片数组或者是指示符)
    // 在cellType中1代表通话记录, 2代表照片
    QianLiTableMenuBar *menuBar;
    NSInteger loadTimes;
}


@property (weak, nonatomic) IBOutlet UITableView *historyDetailTableView;
@property (weak, nonatomic) IBOutlet UIButton *callButton;
@property (assign, nonatomic) BOOL shouldLoad;
@property (strong, nonatomic) UIImageView *cover;
- (IBAction)call:(id)sender;

@end

@implementation HistroyRecordDetailsViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.    
<<<<<<< .mine
    _historyDetailTableView.contentInset = UIEdgeInsetsMake(10,0,70,0);
=======
//    _historyDetailTableView.contentInset = UIEdgeInsetsMake(10,0,0,0);
>>>>>>> .r1242
    _shouldLoad = NO;
    loadTimes = 1;
   // [self editHistory:nil];
    UIBarButtonItem *more = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"more.png"] landscapeImagePhone:[UIImage imageNamed:@"more.png"] style:UIBarButtonItemStylePlain target:self action:@selector(buttonMorePressed)];
    more.tintColor = [UIColor whiteColor];
    [self.navigationItem setRightBarButtonItem:more];
    [self.navigationController.navigationBar setTintColor:[UIColor whiteColor]];
    
    // 加入遮盖原view的imageview
    UITapGestureRecognizer *tapCover = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(dismissMenuBar)];
    _cover = [[UIImageView alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    _cover.backgroundColor = [UIColor blackColor];
    _cover.alpha = 0;
    [_cover addGestureRecognizer:tapCover];
    _cover.userInteractionEnabled = YES;
    [self.view addSubview:_cover];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(displayHistoryWithEntryNumber) name:kHistoryChangedNotification object:nil];
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self displayHistoryWithEntryNumber];
}

-(void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated
{
    // 如果Menu Bar升起则将其dismiss
    [super viewWillDisappear:animated];
    if (menuBar) {
        [self dismissMenuBar];
        menuBar=nil;
    }
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
}

- (void)displayHistoryWithEntryNumber
{
    [self loadDetailHistory];
    [self.historyDetailTableView reloadData];
}

- (void)loadDetailHistory
{
    
    if (!_chatRecords) {
        _chatRecords = [[NSMutableArray alloc] initWithCapacity:1];
    }
    else{
        [_chatRecords removeAllObjects];
    }
    
    [[SipStackUtils sharedInstance].historyService loadWithRemoteParty:_remotePartyPhoneNumber WithEntriesLength:loadTimes * 12];
    // Sort the entries in history array
    NSSortDescriptor *sortDescriptor;
    sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"start" ascending:NO];
    NSArray *sortDescriptors = [NSArray arrayWithObject:sortDescriptor];
    NSMutableArray *sortedArray;
    sortedArray = [NSMutableArray arrayWithArray:[[NSMutableArray arrayWithArray:[[[SipStackUtils sharedInstance].historyService events] allValues]] sortedArrayUsingDescriptors:sortDescriptors]];
    _chatRecords = sortedArray;

}

- (void)clearDetailHistory
{
    [_chatRecords removeAllObjects];
}

- (void)loadMoreMessages
{
    if ([_chatRecords count] < loadTimes * 12) {
        return;
    }
    loadTimes ++;
    [self displayHistoryWithEntryNumber];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - UITableView Delegate

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    HistoryDetailCell *cell = (HistoryDetailCell *)[self tableView:tableView cellForRowAtIndexPath:indexPath];
    return CGRectGetHeight(cell.frame);
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return [_chatRecords count];
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"HistoryDetailCell";
    
	HistoryDetailCell *historyCell = (HistoryDetailCell *)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
	if (historyCell == nil) {
		historyCell = [[HistoryDetailCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }

    NgnHistoryEvent *history = (NgnHistoryEvent *)[_chatRecords objectAtIndex:indexPath.row];
    NSInteger recordType = 1;
    if (history.status == HistoryEventStatus_Outgoing) {
        recordType = 1;
        if (history.mediaType == MediaType_Audio) {
            double duration = history.end - history.start;
            int minutes = floor(duration / 60);
            int seconds = floor(duration - minutes * 60);
            NSString *str;
            if (minutes > 0) {
                str = [NSString stringWithFormat:@"%d m %d s", minutes, seconds];
            }
            else{
                str = [NSString stringWithFormat:@"%d s", seconds];
            }
            [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote: str];
        }
    }
    else if (history.status == HistoryEventStatus_OutgoingCancelled){
        recordType = 1;
        if (history.mediaType == MediaType_Audio) {
            [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote: @"Cancelled"];
        }
    }
    else if (history.status == HistoryEventStatus_OutgoingRejected){
        recordType = 1;
        if (history.mediaType == MediaType_Audio) {
            [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote: @"Rejected"];
        }
    }
    else if (history.status == HistoryEventStatus_Incoming){
        recordType = 2;
        if (history.mediaType == MediaType_Audio) {
            double duration = history.end - history.start;
            int minutes = floor(duration / 60);
            int seconds = floor(duration - minutes * 60);
            NSString *str;
            if (minutes > 0) {
                str = [NSString stringWithFormat:@"%d m %d s", minutes, seconds];
            }
            else{
                str = [NSString stringWithFormat:@"%d s", seconds];
            }
            [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote: str];
        }
    }
    else if (history.status == HistoryEventStatus_IncomingCancelled){
        recordType = 2;
        if (history.mediaType == MediaType_Audio) {
            [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote: @"Cancelled"];
        }
    }
    else if (history.status == HistoryEventStatus_IncomingRejected){
        recordType = 2;
        if (history.mediaType == MediaType_Audio) {
            [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote: @"Rejected"];
        }
    }
    else if (history.status == HistoryEventStatus_Missed){
        // add missed call history
        recordType = 3;
        [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote: @"Missed call"];
    }
    else if (history.status == HistoryEventStatus_Appointment){
        recordType = 4;
        [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote: @"Appointment"];
    }
    
    
    if (history.mediaType == MediaType_Image){
        NgnHistoryImageEvent *event = (NgnHistoryImageEvent *)history;
        NSArray *imageArray = [NSKeyedUnarchiver unarchiveObjectWithData:event.content];
        double duration = history.end - history.start;
        int minutes = floor(duration / 60);
        int seconds = floor(duration - minutes * 60);
        NSString *str;
        if (minutes > 0) {
            str = [NSString stringWithFormat:@"%d s %d s", minutes, seconds];
        }
        else{
            str = [NSString stringWithFormat:@"%d s", seconds];
        }
        [historyCell setCallRecord:recordType timeLabel:[Utils readableTimeFromSecondsSince1970LikeWeixin:history.start] footnote:str images:imageArray];
    }
    
    return historyCell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    //NSLog(@"selected row %d",  indexPath.row);
}

// ScrollView Delegate;

-(void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    if (scrollView.contentOffset.y >= MAX(scrollView.contentSize.height - scrollView.frame.size.height + scrollView.contentInset.bottom, 0))
    {
        _shouldLoad = YES;
    }
}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
    if (menuBar) {
        [menuBar dismiss];
    }
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    if (_shouldLoad) {
        _shouldLoad = NO;
        [self loadMoreMessages];
    }
}

- (IBAction)call:(id)sender
{
    if ([_remotePartyPhoneNumber isEqualToString:[UserDataAccessor getUserRemoteParty]]) {
        return;
    }
    
    if (![Utils checkInternetAndDispWarning:YES]) {
        return;
    }
    
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"MainStoryboard" bundle:nil];
    UINavigationController *audioCallNavigationController = [storyboard instantiateViewControllerWithIdentifier:@"audioCallNavigationController"];
    QianLiAudioCallViewController *audioCallViewController = (QianLiAudioCallViewController *)audioCallNavigationController.topViewController;
    audioCallViewController.ViewState = Calling;
    [self presentViewController:audioCallNavigationController animated:YES completion:nil];
    
    [[SipStackUtils sharedInstance] setRemotePartyNumber:_remotePartyPhoneNumber];
    NSString *remoteUri  = [[SipStackUtils sharedInstance] getRemotePartyNumber];
    
    long sID;
    if([[SipStackUtils sharedInstance].audioService makeAudioCallWithRemoteParty:remoteUri andSipStack:[[SipStackUtils sharedInstance].sipService getSipStack]  sessionid:&sID])
    {
        audioCallViewController.audioSessionID = sID;
        audioCallViewController.remotePartyNumber = remoteUri;
        NSString *imageSessionID = [NSString stringWithFormat:@"%@%@",[UserDataAccessor getUserRemoteParty],remoteUri];
        [[PictureManager sharedInstance] setImageSession:imageSessionID];
        
        // Add to history record
        NgnHistoryAVCallEvent *event = [[NgnHistoryAVCallEvent alloc] init:NO withRemoteParty:_remotePartyPhoneNumber];
        audioCallViewController.activeEvent = event;
        event.status = HistoryEventStatus_Outgoing;
        event.start = [[NSDate date] timeIntervalSince1970];
        //[[SipStackUtils sharedInstance].historyService addEvent:event];
        
        // Add to main recent
        NSString *partner = [[QianLiContactsAccessor sharedInstance] getNameForRemoteParty:_remotePartyPhoneNumber];
        if (partner == nil) {
            partner = _remotePartyPhoneNumber;
        }
        [[MainHistoryDataAccessor sharedInstance] updateForRemoteParty:_remotePartyPhoneNumber Content:[NSString stringWithFormat:@"Called %@",partner] Time:[[NSDate date] timeIntervalSince1970] Type:@"OutGoindCall"];
    }
    else{
    }
    
    [MobClick event:@"makeCall" label:@"touch"];
}

- (void)sendRequest
{
    if (![Utils checkInternetAndDispWarning:YES]) {
        return;
    }
    //TODO: delete
    [self clearAll];
    // 发起预约
    [self dismissMenuBar];
    
    [MobClick event:@"makeAppointment" label:@"touch"];
}

- (void)clearAll
{
    loadTimes = 1;
    [[SipStackUtils sharedInstance].historyService deleteEvents:MediaType_SMS withRemoteParty:_remotePartyPhoneNumber];
    [[SipStackUtils sharedInstance].historyService deleteEvents:MediaType_Image withRemoteParty:_remotePartyPhoneNumber];
    [[SipStackUtils sharedInstance].historyService deleteEvents:MediaType_Audio withRemoteParty:_remotePartyPhoneNumber];
    [[MainHistoryDataAccessor sharedInstance] deleteObjectForRemoteParty:_remotePartyPhoneNumber];
    [self displayHistoryWithEntryNumber];
}

- (void)buttonMorePressed
{
    if (menuBar) {
        if (menuBar.isShow==YES) {
//            [menuBar dismiss];
            [self dismissMenuBar];
            return;
        }
    }
//    // 加入遮盖原view的imageview
//    UIImageView *cover = [[UIImageView alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
//    cover.backgroundColor = [UIColor blackColor];
//    cover.alpha = 0;
//    [self.view addSubview:cover];
    
    [self showCover];
    
    CGSize size = CGSizeMake(self.view.bounds.size.width, 60);
    QianLiTableMenuBarItem *item1 = [[QianLiTableMenuBarItem alloc] initWithTitle:@"千里通话" target:self image:[UIImage imageNamed:@"phoneBlack.png"] action:@selector(call:) size:size];
    QianLiTableMenuBarItem *item2 = [[QianLiTableMenuBarItem alloc] initWithTitle:@"预约通话" target:self image:[UIImage imageNamed:@"MenuBarItemPhoto.png"] action:@selector(sendRequest) size:size];
    //QianLiTableMenuBarItem *item3 = [[QianLiTableMenuBarItem alloc] initWithTitle:@"清空记录" target:self image:[UIImage imageNamed:@"MenuBarItemPhoto.png"] action:@selector(clearAll) size:size];
    
    menuBar = [[QianLiTableMenuBar alloc] initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width, 120.0f) items:@[item1, item2]];
    menuBar.delegate = self;
    [menuBar show];
}

- (void)showCover
{
    [UIView animateWithDuration:0.2 animations:^{
        _cover.alpha = 0.35;
    }];
}

- (void)dismissMenuBar
{
    [menuBar dismiss];
    [UIView animateWithDuration:0.2 animations:^{
        _cover.alpha = 0.0;
    }];
}

@end
